---
source: src/tvalue.rs
expression: module.to_string()
---
; ModuleID = 'std::tvalue'
source_filename = "std::tvalue"

%"std::tvalue::TValue" = type { i8, [15 x i8] }
%"std::tvalue::TValue::Bool" = type { [15 x i8], i8 }
%"std::tvalue::TValue::Number" = type { [8 x i8], float }

declare i32 @printf(ptr, ...)

define void @print_tvalue(ptr %0) {
entry:
  %ob = alloca [2 x i8], align 1
  store [2 x i8] c"[\00", ptr %ob, align 1
  %1 = call i32 (ptr, ...) @printf(ptr %ob)
  br label %looptop

looptop:                                          ; preds = %looptop, %entry
  %idx = phi i32 [ %nextidx, %looptop ], [ 0, %entry ]
  %nextidx = add i32 %idx, 1
  %ch = getelementptr [16 x i8], ptr %0, i32 0, i32 %idx
  %ch1 = load i8, ptr %ch, align 1
  %ch_fmt = alloca [5 x i8], align 1
  store [5 x i8] c"%*i,\00", ptr %ch_fmt, align 1
  %2 = call i32 (ptr, ...) @printf(ptr %ch_fmt, i8 3, i8 %ch1)
  %done = icmp ugt i32 %nextidx, 15
  br i1 %done, label %exit, label %looptop

exit:                                             ; preds = %looptop
  %cb = alloca [3 x i8], align 1
  store [3 x i8] c"]\0A\00", ptr %cb, align 1
  %3 = call i32 (ptr, ...) @printf(ptr %cb)
  ret void
}

; Function Attrs: nounwind
declare ptr @malloc(i32) #0

define void @"std::tvalue_new_nil"(ptr %0) {
entry:
  %tag_ptr = getelementptr inbounds %"std::tvalue::TValue", ptr %0, i32 0, i32 0
  store i8 0, ptr %tag_ptr, align 1
  call void @print_tvalue(ptr %0)
  %data_ptr = getelementptr inbounds %"std::tvalue::TValue", ptr %0, i32 0, i32 1
  store [15 x i8] zeroinitializer, ptr %data_ptr, align 1
  ret void
}

define void @"std::tvalue_new_bool"(ptr %0, i1 %1) {
entry:
  %tag_ptr = getelementptr inbounds %"std::tvalue::TValue", ptr %0, i32 0, i32 0
  store i8 1, ptr %tag_ptr, align 1
  call void @print_tvalue(ptr %0)
  %data_ptr = getelementptr inbounds %"std::tvalue::TValue::Bool", ptr %0, i32 0, i32 1
  store i1 %1, ptr %data_ptr, align 1
  call void @print_tvalue(ptr %0)
  ret void
}

define void @"std::tvalue_new_num"(ptr %0, float %1) {
entry:
  %tag_ptr = getelementptr inbounds %"std::tvalue::TValue", ptr %0, i32 0, i32 0
  store i8 2, ptr %tag_ptr, align 1
  call void @print_tvalue(ptr %0)
  %data_ptr = getelementptr inbounds %"std::tvalue::TValue::Number", ptr %0, i32 0, i32 1
  store float %1, ptr %data_ptr, align 4
  call void @print_tvalue(ptr %0)
  ret void
}

define i8 @getTValueTag(ptr %tagged_value) {
entry:
  %tag_ptr = getelementptr inbounds %"std::tvalue::TValue", ptr %tagged_value, i32 0, i32 0
  %tag_val = load i8, ptr %tag_ptr, align 1
  ret i8 %tag_val
}

define i1 @getTValueValue_bool(ptr %tagged_value) {
entry:
  %tag = call i8 @getTValueTag(ptr %tagged_value)
  %is_nil = icmp eq i8 %tag, 0
  br i1 %is_nil, label %is_nil1, label %is_not_nil

is_nil1:                                          ; preds = %entry
  ret i1 false

is_not_nil:                                       ; preds = %entry
  %is_bool = icmp eq i8 %tag, 1
  br i1 %is_bool, label %is_bool2, label %is_not_bool

is_bool2:                                         ; preds = %is_not_nil
  %raw_variant_pointer = getelementptr inbounds %"std::tvalue::TValue::Bool", ptr %tagged_value, i32 0, i32 1
  %bool_t_int = load i8, ptr %raw_variant_pointer, align 1
  %ret = icmp ugt i8 %bool_t_int, 0
  ret i1 %ret

is_not_bool:                                      ; preds = %is_not_nil
  ret i1 true
}

define i1 @tvalue_is_number(ptr %0) {
entry:
  %tag = call i8 @getTValueTag(ptr %0)
  %cmp = icmp eq i8 %tag, 2
  ret i1 %cmp
}

define float @tvalue_get_number(ptr %0) {
entry:
  %is_num = call i1 @tvalue_is_number(ptr %0)
  br i1 %is_num, label %ian, label %nan

ian:                                              ; preds = %entry
  %value_ptr = getelementptr inbounds %"std::tvalue::TValue::Number", ptr %0, i32 0, i32 1
  %value = load float, ptr %value_ptr, align 4
  ret float %value

nan:                                              ; preds = %entry
  ret float 0x7FF8000000000000
}

define i1 @tvalue_add(ptr %lhs, ptr %rhs, ptr %out) {
entry:
  %lhs_is_num = call i1 @tvalue_is_number(ptr %lhs)
  br i1 %lhs_is_num, label %lhs_ian, label %nan

nan:                                              ; preds = %lhs_ian, %entry
  ret i1 false

lhs_ian:                                          ; preds = %entry
  %rhs_is_num = call i1 @tvalue_is_number(ptr %rhs)
  br i1 %rhs_is_num, label %rhs_ian, label %nan

rhs_ian:                                          ; preds = %lhs_ian
  %lhs_value = call float @tvalue_get_number(ptr %lhs)
  %rhs_value = call float @tvalue_get_number(ptr %rhs)
  %out_value = fadd float %rhs_value, %lhs_value
  call void @"std::tvalue_new_num"(ptr %out, float %out_value)
  %out_value_ptr = getelementptr inbounds %"std::tvalue::TValue::Number", ptr %out, i32 0, i32 1
  store float %out_value, ptr %out_value_ptr, align 4
  ret i1 true
}

attributes #0 = { nounwind }

!llvm.dbg.cu = !{!0}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "luminary", isOptimized: false, runtimeVersion: 1, emissionKind: FullDebug, splitDebugInlining: false)
!1 = !DIFile(filename: "std_tvalue.ll", directory: ".")

