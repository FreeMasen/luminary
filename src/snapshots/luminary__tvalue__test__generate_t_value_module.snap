---
source: src/tvalue.rs
expression: module.to_string()
---
; ModuleID = 'std::tvalue'
source_filename = "std::tvalue"

%"std::tvalue::TValue" = type { i8, [23 x i8] }
%"std::tvalue::TValue::Bool" = type { [23 x i8], i8 }
%"std::tvalue::TValue::Number" = type { [12 x i8], float }
%"std::tvalue::TValue::String" = type { i8, i32, i32, i32, ptr }

@PRECISION = constant float 0x3F1A36E2E0000000

; Function Attrs: nounwind
declare ptr @malloc(i32) #0

define void @"std::float_to_string::append_char"(ptr %buf_ptr, ptr %len_ptr, i8 %value) {
entry:
  %len = load i32, ptr %len_ptr, align 4
  %next_len = add i32 %len, 1
  %ch_ptr = getelementptr [0 x i8], ptr %buf_ptr, i32 0, i32 %len
  store i8 %value, ptr %ch_ptr, align 1
  store i32 %next_len, ptr %len_ptr, align 4
  ret void
}

define void @"std::float_to_string::append"(ptr %buf_ptr, ptr %len_ptr, i8 %value) {
entry:
  %ch = add i8 48, %value
  call void @"std::float_to_string::append_char"(ptr %buf_ptr, ptr %len_ptr, i8 %ch)
  ret void
}

define i32 @"std::float_to_string::float_to_string"(float %value, ptr %dest) {
entry:
  %n = fcmp uno float %value, 0.000000e+00
  br i1 %n, label %isnan, label %isnnan

isnan:                                            ; preds = %entry
  store [3 x i8] c"nan", ptr %dest, align 1
  ret i32 3

isnnan:                                           ; preds = %entry
  %inf = fcmp oeq float %value, 0x7FF0000000000000
  br i1 %inf, label %isinf, label %isninf

isinf:                                            ; preds = %isnnan
  store [3 x i8] c"inf", ptr %dest, align 1
  ret i32 3

isninf:                                           ; preds = %isnnan
  %z = fcmp oeq float %value, 0.000000e+00
  br i1 %z, label %isz, label %isnz

isz:                                              ; preds = %isninf
  store [1 x i8] c"0", ptr %dest, align 1
  ret i32 1

isnz:                                             ; preds = %isninf
  %m_ptr = alloca i32, align 4
  %n_ptr = alloca float, align 4
  store float %value, ptr %n_ptr, align 4
  %ret_ptr = alloca float, align 4
  store i32 0, ptr %ret_ptr, align 4
  %neg = call i1 @"std::float_to_string::check_for_neg"(ptr %dest, ptr %n_ptr, ptr %ret_ptr)
  %n1 = load float, ptr %n_ptr, align 4
  %m = call i32 @"std::float_to_string::calculate_magnitude"(float %n1)
  store i32 %m, ptr %m_ptr, align 4
  br label %loop_top

loop_top:                                         ; preds = %loop_body, %isnz
  %should_continue = call i1 @"std::float_to_string::loop_should_continue"(ptr %n_ptr, ptr %m_ptr)
  br i1 %should_continue, label %loop_body, label %loop_exit

loop_exit:                                        ; preds = %loop_top
  %ret = load i32, ptr %ret_ptr, align 4
  ret i32 %ret

loop_body:                                        ; preds = %loop_top
  call void @"std::float_to_string::precision_loop_step"(ptr %dest, ptr %n_ptr, ptr %m_ptr, ptr %ret_ptr)
  br label %loop_top
}

define i1 @"std::float_to_string::check_for_neg"(ptr %buf, ptr %n_ptr, ptr %0) {
entry:
  %n = load float, ptr %n_ptr, align 4
  %neg = fcmp olt float %n, 0.000000e+00
  br i1 %neg, label %is_neg, label %not_neg

is_neg:                                           ; preds = %entry
  %inverted = fneg float %n
  store float %inverted, ptr %n_ptr, align 4
  call void @"std::float_to_string::append_char"(ptr %buf, ptr %0, i8 45)
  ret i1 %neg

not_neg:                                          ; preds = %entry
  ret i1 false
}

define i32 @"std::float_to_string::calculate_magnitude"(float %n) {
entry:
  %mf = call float @llvm.log10.f32(float %n)
  %mf_lt1 = fcmp olt float %mf, 1.000000e+00
  br i1 %mf_lt1, label %lt1, label %ge1

lt1:                                              ; preds = %entry
  ret i32 0

ge1:                                              ; preds = %entry
  %m = fptosi float %mf to i32
  ret i32 %m
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.log10.f32(float) #1

define i1 @"std::float_to_string::loop_should_continue"(ptr %n_ptr, ptr %m_ptr) {
entry:
  %n = load float, ptr %n_ptr, align 4
  %m = load i32, ptr %m_ptr, align 4
  %prec = load float, ptr @PRECISION, align 4
  %n_gt_prec = fcmp ogt float %n, %prec
  br i1 %n_gt_prec, label %ret_true, label %check_m

check_m:                                          ; preds = %entry
  %m_ge_z = icmp sge i32 %m, 0
  br i1 %m_ge_z, label %ret_true, label %ret_false

ret_true:                                         ; preds = %check_m, %entry
  ret i1 true

ret_false:                                        ; preds = %check_m
  ret i1 false
}

define void @"std::float_to_string::precision_loop_step"(ptr %buf, ptr %n_ptr, ptr %m_ptr, ptr %len) {
entry:
  %n = load float, ptr %n_ptr, align 4
  %m = load i32, ptr %m_ptr, align 4
  %m1 = sitofp i32 %m to float
  %weight = call float @llvm.pow.f32(float 1.000000e+01, float %m1)
  %weight_gt_zero = fcmp ogt float %weight, 0.000000e+00
  br i1 %weight_gt_zero, label %wgtz, label %after_digit

wgtz:                                             ; preds = %entry
  %weight_is_inf = fcmp oeq float %weight, 0x7FF0000000000000
  br i1 %weight_is_inf, label %after_digit, label %digit_bb

digit_bb:                                         ; preds = %wgtz
  %digit_pre = fdiv float %n, %weight
  %digit_pre2 = call float @llvm.floor.f32(float %digit_pre)
  %n_update = fmul float %digit_pre2, %weight
  %digit = fptoui float %digit_pre2 to i8
  call void @"std::float_to_string::append"(ptr %buf, ptr %len, i8 %digit)
  %new_n = fsub float %n, %n_update
  store float %new_n, ptr %n_ptr, align 4
  br label %after_digit

after_digit:                                      ; preds = %digit_bb, %wgtz, %entry
  %m_eq_z = icmp eq i32 %m, 0
  br i1 %m_eq_z, label %m_eq_z_bb, label %after_dot

m_eq_z_bb:                                        ; preds = %after_digit
  %n2 = load float, ptr %n_ptr, align 4
  %n_gt_z = fcmp ogt float %n2, 0.000000e+00
  br i1 %n_gt_z, label %handle_dot, label %after_dot

handle_dot:                                       ; preds = %m_eq_z_bb
  call void @"std::float_to_string::append_char"(ptr %buf, ptr %len, i8 46)
  br label %after_dot

after_dot:                                        ; preds = %handle_dot, %m_eq_z_bb, %after_digit
  %new_m = sub i32 %m, 1
  store i32 %new_m, ptr %m_ptr, align 4
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.pow.f32(float, float) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.floor.f32(float) #1

define void @"std::tvalue::new_nil"(ptr sret(%"std::tvalue::TValue") %0) {
entry:
  %tag_ptr = getelementptr inbounds %"std::tvalue::TValue", ptr %0, i32 0, i32 0
  store i8 0, ptr %tag_ptr, align 1
  %data_ptr = getelementptr inbounds %"std::tvalue::TValue", ptr %0, i32 0, i32 1
  store [15 x i8] zeroinitializer, ptr %data_ptr, align 1
  ret void
}

define void @"std::tvalue::new_bool"(ptr sret(%"std::tvalue::TValue") %0, i1 %1) {
entry:
  %tag_ptr = getelementptr inbounds %"std::tvalue::TValue", ptr %0, i32 0, i32 0
  store i8 1, ptr %tag_ptr, align 1
  %data_ptr = getelementptr inbounds %"std::tvalue::TValue::Bool", ptr %0, i32 0, i32 1
  store i1 %1, ptr %data_ptr, align 1
  ret void
}

define void @"std::tvalue::new_num"(ptr sret(%"std::tvalue::TValue") %0, float %1) {
entry:
  %tag_ptr = getelementptr inbounds %"std::tvalue::TValue", ptr %0, i32 0, i32 0
  store i8 2, ptr %tag_ptr, align 1
  %data_ptr = getelementptr inbounds %"std::tvalue::TValue::Number", ptr %0, i32 0, i32 1
  store float %1, ptr %data_ptr, align 4
  ret void
}

define void @"std::tvalue::new_str"(ptr %0, i32 %1) {
entry:
  %tag_ptr = getelementptr inbounds %"std::tvalue::TValue", ptr %0, i32 0, i32 0
  store i8 3, ptr %tag_ptr, align 1
  %len_ptr = getelementptr inbounds %"std::tvalue::TValue::String", ptr %0, i32 0, i32 1
  store i32 0, ptr %len_ptr, align 4
  %cap_ptr = getelementptr inbounds %"std::tvalue::TValue::String", ptr %0, i32 0, i32 2
  store i32 %1, ptr %cap_ptr, align 4
  %ref_ct = getelementptr inbounds %"std::tvalue::TValue::String", ptr %0, i32 0, i32 3
  store i32 0, ptr %ref_ct, align 4
  %bytes_ptr = call ptr @malloc(i32 %1)
  %storage = getelementptr inbounds %"std::tvalue::TValue::String", ptr %0, i32 0, i32 4
  store ptr %bytes_ptr, ptr %storage, align 8
  ret void
}

define i8 @"std::tvalue::get_tag"(ptr %tagged_value) {
entry:
  %is_null = icmp eq ptr %tagged_value, null
  br i1 %is_null, label %null_block, label %not_null

null_block:                                       ; preds = %entry
  ret i8 0

not_null:                                         ; preds = %entry
  %tag_ptr = getelementptr inbounds %"std::tvalue::TValue", ptr %tagged_value, i32 0, i32 0
  %tag_val = load i8, ptr %tag_ptr, align 1
  ret i8 %tag_val
}

define i1 @"std::tvalue::is_truthy"(ptr %tagged_value) {
entry:
  %tag = call i8 @"std::tvalue::get_tag"(ptr %tagged_value)
  %is_nil = icmp eq i8 %tag, 0
  br i1 %is_nil, label %is_nil1, label %is_not_nil

is_nil1:                                          ; preds = %entry
  ret i1 false

is_not_nil:                                       ; preds = %entry
  %is_bool = icmp eq i8 %tag, 1
  br i1 %is_bool, label %is_bool2, label %is_not_bool

is_bool2:                                         ; preds = %is_not_nil
  %raw_variant_pointer = getelementptr inbounds %"std::tvalue::TValue::Bool", ptr %tagged_value, i32 0, i32 1
  %bool_t_int = load i8, ptr %raw_variant_pointer, align 1
  %ret = icmp ugt i8 %bool_t_int, 0
  ret i1 %ret

is_not_bool:                                      ; preds = %is_not_nil
  ret i1 true
}

define i1 @"std::tvalue::is_number"(ptr %0) {
entry:
  %tag = call i8 @"std::tvalue::get_tag"(ptr %0)
  %cmp = icmp eq i8 %tag, 2
  ret i1 %cmp
}

define float @"std::tvalue::get_value_number"(ptr %0) {
entry:
  %is_num = call i1 @"std::tvalue::is_number"(ptr %0)
  br i1 %is_num, label %ian, label %nan

ian:                                              ; preds = %entry
  %value_ptr = getelementptr inbounds %"std::tvalue::TValue::Number", ptr %0, i32 0, i32 1
  %value = load float, ptr %value_ptr, align 4
  ret float %value

nan:                                              ; preds = %entry
  ret float 0x7FF8000000000000
}

declare i32 @write(i32, ptr, i32, ...)

define void @"std::tvalue::fmt::print_tvalue_number"(ptr %0) {
entry:
  %value_ptr = getelementptr inbounds %"std::tvalue::TValue::Number", ptr %0, i32 0, i32 1
  %len = load float, ptr %value_ptr, align 4
  %is_too_large = fcmp oge float %len, 1.000000e+09
  br i1 %is_too_large, label %too_large, label %not_too_large

too_large:                                        ; preds = %entry
  %buf = alloca [32 x i8], align 1
  store [32 x i8] c"<error float too large to print>", ptr %buf, align 1
  ret void

not_too_large:                                    ; preds = %entry
  %bytes_ptr = alloca [255 x i8], align 1
  %len1 = call i32 @"std::float_to_string::float_to_string"(float %len, ptr %bytes_ptr)
  %_ = call i32 (i32, ptr, i32, ...) @write(i32 1, ptr %bytes_ptr, i32 %len1)
  ret void
}

define void @"std::tvalue::fmt::print_tvalue_string"(ptr %0) {
entry:
  %len_ptr = getelementptr inbounds %"std::tvalue::TValue::String", ptr %0, i32 0, i32 1
  %len = load i32, ptr %len_ptr, align 4
  %bytes_ptr_ptr = getelementptr inbounds %"std::tvalue::TValue::String", ptr %0, i32 0, i32 4
  %bytes_ptr = load ptr, ptr %bytes_ptr_ptr, align 8
  %_ = call i32 (i32, ptr, i32, ...) @write(i32 1, ptr %bytes_ptr, i32 %len)
  ret void
}

define void @"std::tvalue::fmt::print_tvalue_raw"() {
entry:
  %msg_ptr = alloca [23 x i8], align 1
  %_ = call i32 (i32, ptr, i32, ...) @write(i32 2, ptr %msg_ptr, i32 23)
  call void @llvm.trap()
  ret void
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #2

define void @"std::tvalue::fmt::print_tvalue"(ptr %0, i1 %1) {
entry:
  %tag = call i8 @"std::tvalue::get_tag"(ptr %0)
  %is_nil = icmp eq i8 %tag, 0
  br i1 %is_nil, label %nil, label %notnil

unknown:                                          ; preds = %notnum
  call void @"std::tvalue::fmt::print_tvalue_raw"()
  ret void

nil:                                              ; preds = %entry
  %nil_fmt = alloca [4 x i8], align 1
  store [3 x i8] c"nil", ptr %nil_fmt, align 1
  %_ = call i32 (i32, ptr, i32, ...) @write(i32 1, ptr %nil_fmt, i32 3)
  ret void

boolean:                                          ; preds = %notnil
  %truthy_ptr = getelementptr inbounds %"std::tvalue::TValue::Bool", ptr %0, i32 0, i32 1
  %truthy = load i1, ptr %truthy_ptr, align 1
  br i1 %truthy, label %bool_true, label %bool_false

number:                                           ; preds = %notbool
  call void @"std::tvalue::fmt::print_tvalue_number"(ptr %0)
  ret void

string:                                           ; preds = %notnum
  call void @"std::tvalue::fmt::print_tvalue_string"(ptr %0)
  ret void

notnil:                                           ; preds = %entry
  %is_bool = icmp eq i8 %tag, 1
  br i1 %is_bool, label %boolean, label %notbool

notbool:                                          ; preds = %notnil
  %is_num = icmp eq i8 %tag, 2
  br i1 %is_num, label %number, label %notnum

notnum:                                           ; preds = %notbool
  %is_str = icmp eq i8 %tag, 3
  br i1 %is_str, label %string, label %unknown

bool_true:                                        ; preds = %boolean
  %nil_fmt1 = alloca [4 x i8], align 1
  store [4 x i8] c"true", ptr %nil_fmt1, align 1
  %_2 = call i32 (i32, ptr, i32, ...) @write(i32 1, ptr %nil_fmt1, i32 4)
  ret void

bool_false:                                       ; preds = %boolean
  %nil_fmt3 = alloca [4 x i8], align 1
  store [5 x i8] c"false", ptr %nil_fmt3, align 1
  %_4 = call i32 (i32, ptr, i32, ...) @write(i32 1, ptr %nil_fmt3, i32 5)
  ret void
}

define i1 @"std::tvalue::is_two_numbers"(ptr %lhs, ptr %rhs) {
entry:
  %lhs_is_num = call i1 @"std::tvalue::is_number"(ptr %lhs)
  br i1 %lhs_is_num, label %lhs_ian, label %nan

nan:                                              ; preds = %lhs_ian, %entry
  ret i1 false

lhs_ian:                                          ; preds = %entry
  %rhs_is_num = call i1 @"std::tvalue::is_number"(ptr %rhs)
  br i1 %rhs_is_num, label %rhs_ian, label %nan

rhs_ian:                                          ; preds = %lhs_ian
  ret i1 true
}

define i1 @"std::tvalue::add"(ptr %lhs, ptr %rhs, ptr %out) {
entry:
  %are_nums = call i1 @"std::tvalue::is_two_numbers"(ptr %lhs, ptr %rhs)
  br i1 %are_nums, label %ian, label %nan

ian:                                              ; preds = %entry
  %lhs_value = call float @"std::tvalue::get_value_number"(ptr %lhs)
  %rhs_value = call float @"std::tvalue::get_value_number"(ptr %rhs)
  %out_value = fadd float %lhs_value, %rhs_value
  call void @"std::tvalue::new_num"(ptr %out, float %out_value)
  ret i1 true

nan:                                              ; preds = %entry
  ret i1 false
}

define i1 @"std::tvalue::sub"(ptr %lhs, ptr %rhs, ptr %out) {
entry:
  %are_nums = call i1 @"std::tvalue::is_two_numbers"(ptr %lhs, ptr %rhs)
  br i1 %are_nums, label %ian, label %nan

ian:                                              ; preds = %entry
  %lhs_value = call float @"std::tvalue::get_value_number"(ptr %lhs)
  %rhs_value = call float @"std::tvalue::get_value_number"(ptr %rhs)
  %out_value = fsub float %lhs_value, %rhs_value
  call void @"std::tvalue::new_num"(ptr %out, float %out_value)
  ret i1 true

nan:                                              ; preds = %entry
  ret i1 false
}

define i1 @"std::tvalue::mul"(ptr %lhs, ptr %rhs, ptr %out) {
entry:
  %are_nums = call i1 @"std::tvalue::is_two_numbers"(ptr %lhs, ptr %rhs)
  br i1 %are_nums, label %ian, label %nan

ian:                                              ; preds = %entry
  %lhs_value = call float @"std::tvalue::get_value_number"(ptr %lhs)
  %rhs_value = call float @"std::tvalue::get_value_number"(ptr %rhs)
  %out_value = fmul float %lhs_value, %rhs_value
  call void @"std::tvalue::new_num"(ptr %out, float %out_value)
  ret i1 true

nan:                                              ; preds = %entry
  ret i1 false
}

define i1 @"std::tvalue::div"(ptr %lhs, ptr %rhs, ptr %out) {
entry:
  %are_nums = call i1 @"std::tvalue::is_two_numbers"(ptr %lhs, ptr %rhs)
  br i1 %are_nums, label %ian, label %nan

ian:                                              ; preds = %entry
  %lhs_value = call float @"std::tvalue::get_value_number"(ptr %lhs)
  %rhs_value = call float @"std::tvalue::get_value_number"(ptr %rhs)
  %out_value = fdiv float %lhs_value, %rhs_value
  call void @"std::tvalue::new_num"(ptr %out, float %out_value)
  ret i1 true

nan:                                              ; preds = %entry
  ret i1 false
}

define i1 @"std::tvalue::floor_div"(ptr %lhs, ptr %rhs, ptr %out) {
entry:
  %are_nums = call i1 @"std::tvalue::is_two_numbers"(ptr %lhs, ptr %rhs)
  br i1 %are_nums, label %ian, label %nan

ian:                                              ; preds = %entry
  %lhs_value = call float @"std::tvalue::get_value_number"(ptr %lhs)
  %rhs_value = call float @"std::tvalue::get_value_number"(ptr %rhs)
  %out_value = fdiv float %lhs_value, %rhs_value
  %ret = call float @llvm.floor.f32(float %out_value)
  call void @"std::tvalue::new_num"(ptr %out, float %ret)
  ret i1 true

nan:                                              ; preds = %entry
  ret i1 false
}

define i1 @"std::tvalue::pow"(ptr %lhs, ptr %rhs, ptr %out) {
entry:
  %are_nums = call i1 @"std::tvalue::is_two_numbers"(ptr %lhs, ptr %rhs)
  br i1 %are_nums, label %ian, label %nan

ian:                                              ; preds = %entry
  %lhs_value = call float @"std::tvalue::get_value_number"(ptr %lhs)
  %rhs_value = call float @"std::tvalue::get_value_number"(ptr %rhs)
  %out_value = call float @llvm.pow.f32(float %lhs_value, float %rhs_value)
  call void @"std::tvalue::new_num"(ptr %out, float %out_value)
  ret i1 true

nan:                                              ; preds = %entry
  ret i1 false
}

define i1 @"std::tvalue::mod"(ptr %lhs, ptr %rhs, ptr %out) {
entry:
  %are_nums = call i1 @"std::tvalue::is_two_numbers"(ptr %lhs, ptr %rhs)
  br i1 %are_nums, label %ian, label %nan

ian:                                              ; preds = %entry
  %lhs_value = call float @"std::tvalue::get_value_number"(ptr %lhs)
  %rhs_value = call float @"std::tvalue::get_value_number"(ptr %rhs)
  %out_value = frem float %lhs_value, %rhs_value
  call void @"std::tvalue::new_num"(ptr %out, float %out_value)
  ret i1 true

nan:                                              ; preds = %entry
  ret i1 false
}

define i1 @"std::tvalue::NEG"(ptr %0, ptr %1) {
entry:
  %arg_ian = call i1 @"std::tvalue::is_number"(ptr %0)
  br i1 %arg_ian, label %ian, label %nan

nan:                                              ; preds = %entry
  ret i1 false

ian:                                              ; preds = %entry
  %lhs_value = call float @"std::tvalue::get_value_number"(ptr %0)
  %out_value = fneg float %lhs_value
  call void @"std::tvalue::new_num"(ptr %1, float %out_value)
  ret i1 true
}

define i1 @"std::tvalue::is_int"(float %0) {
entry:
  %floored = call float @llvm.floor.f32(float %0)
  %is_int = fcmp oeq float %0, %floored
  br i1 %is_int, label %exit, label %nai

exit:                                             ; preds = %entry
  ret i1 true

nai:                                              ; preds = %entry
  ret i1 false
}

define i1 @"std::tvalue::is_two_ints"(float %lhs, float %rhs) {
entry:
  %lhs_is = call i1 @"std::tvalue::is_int"(float %lhs)
  br i1 %lhs_is, label %lhs_iai, label %nai

lhs_iai:                                          ; preds = %entry
  %rhs_is = call i1 @"std::tvalue::is_int"(float %rhs)
  br i1 %rhs_is, label %rhs_iai, label %nai

rhs_iai:                                          ; preds = %lhs_iai
  ret i1 true

nai:                                              ; preds = %lhs_iai, %entry
  ret i1 false
}

define i1 @"std::tvalue::is_str"(ptr %0) {
entry:
  %kind = call i8 @"std::tvalue::get_tag"(ptr %0)
  %is_str = icmp eq i8 %kind, 3
  ret i1 %is_str
}

define i1 @"std::tvalue::is_two_strs"(ptr %lhs, ptr %rhs) {
entry:
  %lhs_is = call i1 @"std::tvalue::is_str"(ptr %lhs)
  br i1 %lhs_is, label %lhs_ias, label %nai

lhs_ias:                                          ; preds = %entry
  %rhs_is = call i1 @"std::tvalue::is_str"(ptr %rhs)
  br i1 %rhs_is, label %rhs_ias, label %nai

rhs_ias:                                          ; preds = %lhs_ias
  ret i1 true

nai:                                              ; preds = %lhs_ias, %entry
  ret i1 false
}

define i1 @"std::tvalue::bin_and"(ptr %lhs, ptr %rhs, ptr %out) {
entry:
  %are_nums = call i1 @"std::tvalue::is_two_numbers"(ptr %lhs, ptr %rhs)
  br i1 %are_nums, label %ian, label %nan

ian:                                              ; preds = %entry
  %lhs_value = call float @"std::tvalue::get_value_number"(ptr %lhs)
  %rhs_value = call float @"std::tvalue::get_value_number"(ptr %rhs)
  %are_ints = call i1 @"std::tvalue::is_two_ints"(float %lhs_value, float %rhs_value)
  br i1 %are_ints, label %two_ints, label %not_ints

nan:                                              ; preds = %entry
  ret i1 false

two_ints:                                         ; preds = %ian
  %lhs1 = fptosi float %lhs_value to i32
  %rhs2 = fptosi float %rhs_value to i32
  %anded = and i32 %lhs1, %rhs2
  %out3 = sitofp i32 %anded to float
  call void @"std::tvalue::new_num"(ptr %out, float %out3)
  ret i1 true

not_ints:                                         ; preds = %ian
  ret i1 false
}

define i1 @"std::tvalue::bin_or"(ptr %lhs, ptr %rhs, ptr %out) {
entry:
  %are_nums = call i1 @"std::tvalue::is_two_numbers"(ptr %lhs, ptr %rhs)
  br i1 %are_nums, label %ian, label %nan

ian:                                              ; preds = %entry
  %lhs_value = call float @"std::tvalue::get_value_number"(ptr %lhs)
  %rhs_value = call float @"std::tvalue::get_value_number"(ptr %rhs)
  %are_ints = call i1 @"std::tvalue::is_two_ints"(float %lhs_value, float %rhs_value)
  br i1 %are_ints, label %two_ints, label %not_ints

nan:                                              ; preds = %entry
  ret i1 false

two_ints:                                         ; preds = %ian
  %lhs1 = fptosi float %lhs_value to i32
  %rhs2 = fptosi float %rhs_value to i32
  %ored = or i32 %lhs1, %rhs2
  %out3 = sitofp i32 %ored to float
  call void @"std::tvalue::new_num"(ptr %out, float %out3)
  ret i1 true

not_ints:                                         ; preds = %ian
  ret i1 false
}

define i1 @"std::tvalue::lsh"(ptr %lhs, ptr %rhs, ptr %out) {
entry:
  %are_nums = call i1 @"std::tvalue::is_two_numbers"(ptr %lhs, ptr %rhs)
  br i1 %are_nums, label %ian, label %nan

ian:                                              ; preds = %entry
  %lhs_value = call float @"std::tvalue::get_value_number"(ptr %lhs)
  %rhs_value = call float @"std::tvalue::get_value_number"(ptr %rhs)
  %are_ints = call i1 @"std::tvalue::is_two_ints"(float %lhs_value, float %rhs_value)
  br i1 %are_ints, label %two_ints, label %not_ints

nan:                                              ; preds = %entry
  ret i1 false

two_ints:                                         ; preds = %ian
  %lhs1 = fptosi float %lhs_value to i32
  %rhs2 = fptosi float %rhs_value to i32
  %lshed = shl i32 %lhs1, %rhs2
  %out3 = sitofp i32 %lshed to float
  call void @"std::tvalue::new_num"(ptr %out, float %out3)
  ret i1 true

not_ints:                                         ; preds = %ian
  ret i1 false
}

define i1 @"std::tvalue::rsh"(ptr %lhs, ptr %rhs, ptr %out) {
entry:
  %are_nums = call i1 @"std::tvalue::is_two_numbers"(ptr %lhs, ptr %rhs)
  br i1 %are_nums, label %ian, label %nan

ian:                                              ; preds = %entry
  %lhs_value = call float @"std::tvalue::get_value_number"(ptr %lhs)
  %rhs_value = call float @"std::tvalue::get_value_number"(ptr %rhs)
  %are_ints = call i1 @"std::tvalue::is_two_ints"(float %lhs_value, float %rhs_value)
  br i1 %are_ints, label %two_ints, label %not_ints

nan:                                              ; preds = %entry
  ret i1 false

two_ints:                                         ; preds = %ian
  %lhs1 = fptosi float %lhs_value to i32
  %rhs2 = fptosi float %rhs_value to i32
  %rshed = ashr i32 %lhs1, %rhs2
  %out3 = sitofp i32 %rshed to float
  call void @"std::tvalue::new_num"(ptr %out, float %out3)
  ret i1 true

not_ints:                                         ; preds = %ian
  ret i1 false
}

define i1 @"std::tvalue::bin_not"(ptr %value, ptr %out) {
entry:
  %is_num = call i1 @"std::tvalue::is_number"(ptr %value)
  br i1 %is_num, label %ian, label %no

ian:                                              ; preds = %entry
  %value_num = call float @"std::tvalue::get_value_number"(ptr %value)
  %is_int = call i1 @"std::tvalue::is_int"(float %value_num)
  br i1 %is_int, label %iai, label %no

no:                                               ; preds = %ian, %entry
  ret i1 false

iai:                                              ; preds = %ian
  %value_int = fptosi float %value_num to i32
  %value_int1 = xor i32 %value_int, -1
  %ret_float = sitofp i32 %value_int1 to float
  call void @"std::tvalue::new_num"(ptr %out, float %ret_float)
  ret i1 true
}

attributes #0 = { nounwind }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { cold noreturn nounwind }

