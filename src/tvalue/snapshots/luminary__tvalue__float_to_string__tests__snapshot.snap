---
source: src/tvalue/float_to_string.rs
expression: m.to_string()
---
; ModuleID = 'snapshot::float_to_string'
source_filename = "snapshot::float_to_string"

@PRECISION = constant float 0x3F1A36E2E0000000

define void @append_char(ptr %buf_ptr, ptr %len_ptr, i8 %value) {
entry:
  %len = load i32, ptr %len_ptr, align 4
  %next_len = add i32 %len, 1
  %ch_ptr = getelementptr [0 x i8], ptr %buf_ptr, i32 0, i32 %len
  store i8 %value, ptr %ch_ptr, align 1
  store i32 %next_len, ptr %len_ptr, align 4
  ret void
}

define void @append(ptr %buf_ptr, ptr %len_ptr, i8 %value) {
entry:
  %ch = add i8 48, %value
  call void @append_char(ptr %buf_ptr, ptr %len_ptr, i8 %ch)
  ret void
}

define i32 @float_to_string(float %value, ptr %dest) {
entry:
  %n = fcmp uno float %value, 0.000000e+00
  br i1 %n, label %isnan, label %isnnan

isnan:                                            ; preds = %entry
  store [3 x i8] c"nan", ptr %dest, align 1
  ret i32 3

isnnan:                                           ; preds = %entry
  %inf = fcmp oeq float %value, 0x7FF0000000000000
  br i1 %inf, label %isinf, label %isninf

isinf:                                            ; preds = %isnnan
  store [3 x i8] c"inf", ptr %dest, align 1
  ret i32 3

isninf:                                           ; preds = %isnnan
  %z = fcmp oeq float %value, 0.000000e+00
  br i1 %z, label %isz, label %isnz

isz:                                              ; preds = %isninf
  store [1 x i8] c"0", ptr %dest, align 1
  ret i32 1

isnz:                                             ; preds = %isninf
  %m_ptr = alloca i32, align 4
  %m1_ptr = alloca i32, align 4
  %n_ptr = alloca float, align 4
  store float %value, ptr %n_ptr, align 4
  %ret_ptr = alloca float, align 4
  store i32 0, ptr %ret_ptr, align 4
  %neg = call i1 @check_for_neg(ptr %dest, ptr %n_ptr, ptr %ret_ptr)
  %n1 = load float, ptr %n_ptr, align 4
  %mf = call float @llvm.log10.f32(float %n1)
  %m = fptosi float %mf to i32
  store i32 %m, ptr %m_ptr, align 4
  %misge14 = icmp sge i32 %m, 14
  %misge9 = icmp sge i32 %m, 9
  %misge9_ge0 = and i1 %neg, %misge9
  %misle_neg9 = icmp sle i32 %m, -9
  %should_use_exp_pre = or i1 %misge14, %misge9_ge0
  %should_use_exp = or i1 %should_use_exp_pre, %misle_neg9
  br i1 %should_use_exp, label %use_exp, label %dont_use_exp

use_exp:                                          ; preds = %isnz
  %m2 = load i32, ptr %m_ptr, align 4
  %mlez = icmp slt i32 %m2, 0
  br i1 %mlez, label %m_lt_z_bb, label %use_exp_cont

dont_use_exp:                                     ; preds = %use_exp_cont, %isnz
  %m6 = load i32, ptr %m_ptr, align 4
  %m_le1 = icmp slt i32 %m6, 1
  br i1 %m_le1, label %m_lt1_bb, label %loop_top

use_exp_cont:                                     ; preds = %m_lt_z_bb, %use_exp
  %m3 = load i32, ptr %m_ptr, align 4
  %mf4 = sitofp i32 %m3 to float
  %new_n_pre = call float @llvm.pow.f32(float 1.000000e+01, float %mf4)
  %n5 = load float, ptr %n_ptr, align 4
  %new_n = fdiv float %n5, %new_n_pre
  store float %new_n, ptr %n_ptr, align 4
  store i32 %m3, ptr %m1_ptr, align 4
  store i32 0, ptr %m_ptr, align 4
  br label %dont_use_exp

m_lt_z_bb:                                        ; preds = %use_exp
  %new_m = sub i32 %m2, 1
  store i32 %new_m, ptr %m_ptr, align 4
  br label %use_exp_cont

loop_top:                                         ; preds = %loop_body, %m_lt1_bb, %dont_use_exp
  %should_continue = call i1 @loop_should_continue(ptr %n_ptr, ptr %m_ptr)
  br i1 %should_continue, label %loop_body, label %loop_exit

m_lt1_bb:                                         ; preds = %dont_use_exp
  store i32 0, ptr %m_ptr, align 4
  br label %loop_top

loop_exit:                                        ; preds = %loop_top
  br i1 %should_use_exp, label %add_exp, label %exit

loop_body:                                        ; preds = %loop_top
  call void @precision_loop_step(ptr %dest, ptr %n_ptr, ptr %m_ptr, ptr %ret_ptr)
  br label %loop_top

exit:                                             ; preds = %loop_exit17, %loop_exit
  %ret = load i32, ptr %ret_ptr, align 4
  ret i32 %ret

add_exp:                                          ; preds = %loop_exit
  call void @append_char(ptr %dest, ptr %ret_ptr, i8 101)
  %m1 = load i32, ptr %m1_ptr, align 4
  %m1gtz = icmp sgt i32 %m1, 0
  br i1 %m1gtz, label %m1gtzbb, label %m1ltzbb

m1gtzbb:                                          ; preds = %add_exp
  call void @append_char(ptr %dest, ptr %ret_ptr, i8 43)
  br label %exp_cont

m1ltzbb:                                          ; preds = %add_exp
  call void @append(ptr %dest, ptr %ret_ptr, i8 45)
  %m17 = load i32, ptr %m_ptr, align 4
  %new_m1 = sub i32 0, %m17
  store i32 %new_m1, ptr %m1_ptr, align 4
  br label %exp_cont

exp_cont:                                         ; preds = %m1ltzbb, %m1gtzbb
  store i32 0, ptr %m_ptr, align 4
  br label %loop_top8

loop_top8:                                        ; preds = %loop_body9, %exp_cont
  %m111 = load i32, ptr %m1_ptr, align 4
  %cont = icmp sge i32 %m111, 0
  br i1 %cont, label %loop_body9, label %loop_exit10

loop_body9:                                       ; preds = %loop_top8
  %ch_pre = srem i32 %m111, 10
  %ch_pre2 = trunc i32 %ch_pre to i8
  call void @append(ptr %dest, ptr %ret_ptr, i8 %ch_pre2)
  %new_m112 = sdiv i32 %m111, 10
  store i32 %new_m112, ptr %m1_ptr, align 4
  %m13 = load i32, ptr %m_ptr, align 4
  %new_m14 = add i32 %m13, 1
  store i32 %new_m14, ptr %m_ptr, align 4
  br label %loop_top8

loop_exit10:                                      ; preds = %loop_top8
  %current_len = load i32, ptr %ret_ptr, align 4
  %current_m = load i32, ptr %m_ptr, align 4
  %new_len = sub i32 %current_len, %current_m
  store i32 %new_len, ptr %ret_ptr, align 4
  %j_ptr = alloca i32, align 4
  %i_ptr = alloca i32, align 4
  store i32 0, ptr %i_ptr, align 4
  %j_init_pre = sub i32 %current_m, 1
  store i32 %j_init_pre, ptr %j_ptr, align 4
  br label %loop_top15

loop_top15:                                       ; preds = %loop_body16, %loop_exit10
  %i = load i32, ptr %i_ptr, align 4
  %j = load i32, ptr %j_ptr, align 4
  %cont18 = icmp slt i32 %i, %j
  br i1 %cont18, label %loop_body16, label %loop_exit17

loop_body16:                                      ; preds = %loop_top15
  %current_len19 = load i32, ptr %ret_ptr, align 4
  %i_offset = add i32 %i, %current_len19
  %j_offset = add i32 %current_len19, %j
  %swap_lhs1_ptr = getelementptr [255 x i8], ptr %dest, i32 0, i32 %i_offset
  %swap_rhs1_ptr = getelementptr [255 x i8], ptr %dest, i32 0, i32 %j_offset
  %lhs = load i32, ptr %swap_lhs1_ptr, align 4
  %rhs = load i32, ptr %swap_rhs1_ptr, align 4
  %res = xor i32 %lhs, %rhs
  store i32 %res, ptr %swap_lhs1_ptr, align 4
  %lhs20 = load i32, ptr %swap_rhs1_ptr, align 4
  %rhs21 = load i32, ptr %swap_lhs1_ptr, align 4
  %res22 = xor i32 %lhs20, %rhs21
  store i32 %res22, ptr %swap_rhs1_ptr, align 4
  %lhs23 = load i32, ptr %swap_lhs1_ptr, align 4
  %rhs24 = load i32, ptr %swap_rhs1_ptr, align 4
  %res25 = xor i32 %lhs23, %rhs24
  store i32 %res25, ptr %swap_lhs1_ptr, align 4
  %next_len = add i32 %current_len19, 1
  store i32 %next_len, ptr %ret_ptr, align 4
  br label %loop_top15

loop_exit17:                                      ; preds = %loop_top15
  br label %exit
}

define i1 @check_for_neg(ptr %buf, ptr %n_ptr, ptr %0) {
entry:
  %n = load float, ptr %n_ptr, align 4
  %neg = fcmp olt float %n, 0.000000e+00
  br i1 %neg, label %is_neg, label %not_neg

is_neg:                                           ; preds = %entry
  %inverted = fneg float %n
  store float %inverted, ptr %n_ptr, align 4
  call void @append_char(ptr %buf, ptr %0, i8 45)
  ret i1 %neg

not_neg:                                          ; preds = %entry
  ret i1 false
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.log10.f32(float) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.pow.f32(float, float) #0

define i1 @loop_should_continue(ptr %n_ptr, ptr %m_ptr) {
entry:
  %n = load float, ptr %n_ptr, align 4
  %m = load i32, ptr %m_ptr, align 4
  %prec = load float, ptr @PRECISION, align 4
  %n_gt_prec = fcmp ogt float %n, %prec
  br i1 %n_gt_prec, label %ret_true, label %check_m

check_m:                                          ; preds = %entry
  %m_ge_z = icmp sge i32 %m, 0
  br i1 %m_ge_z, label %ret_true, label %ret_false

ret_true:                                         ; preds = %check_m, %entry
  ret i1 true

ret_false:                                        ; preds = %check_m
  ret i1 false
}

define void @precision_loop_step(ptr %buf, ptr %n_ptr, ptr %m_ptr, ptr %len) {
entry:
  %n = load float, ptr %n_ptr, align 4
  %m = load i32, ptr %m_ptr, align 4
  %m1 = sitofp i32 %m to float
  %weight = call float @llvm.pow.f32(float 1.000000e+01, float %m1)
  %weight_gt_zero = fcmp ogt float %weight, 0.000000e+00
  br i1 %weight_gt_zero, label %wgtz, label %after_digit

wgtz:                                             ; preds = %entry
  %weight_is_inf = fcmp oeq float %weight, 0x7FF0000000000000
  br i1 %weight_is_inf, label %after_digit, label %digit_bb

digit_bb:                                         ; preds = %wgtz
  %digit_pre = fdiv float %n, %weight
  %digit_pre2 = call float @llvm.floor.f32(float %digit_pre)
  %n_update = fmul float %digit_pre2, %weight
  %digit = fptoui float %digit_pre2 to i8
  call void @append(ptr %buf, ptr %len, i8 %digit)
  %new_n = fsub float %n, %n_update
  store float %new_n, ptr %n_ptr, align 4
  br label %after_digit

after_digit:                                      ; preds = %digit_bb, %wgtz, %entry
  %m_eq_z = icmp eq i32 %m, 0
  br i1 %m_eq_z, label %m_eq_z_bb, label %after_dot

m_eq_z_bb:                                        ; preds = %after_digit
  %n2 = load float, ptr %n_ptr, align 4
  %n_gt_z = fcmp ogt float %n2, 0.000000e+00
  br i1 %n_gt_z, label %handle_dot, label %after_dot

handle_dot:                                       ; preds = %m_eq_z_bb
  call void @append_char(ptr %buf, ptr %len, i8 46)
  br label %after_dot

after_dot:                                        ; preds = %handle_dot, %m_eq_z_bb, %after_digit
  %new_m = sub i32 %m, 1
  store i32 %new_m, ptr %m_ptr, align 4
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.floor.f32(float) #0

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

