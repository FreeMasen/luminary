name: Release Builds

on:
  workflow_call:
    inputs:
      plan:
        required: true
        type: string

jobs:
  build-local:
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(inputs.plan).ci.github.artifacts_matrix }}
    runs-on: ${{ matrix.runner }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      BUILD_MANIFEST_NAME: target/distrib/${{ join(matrix.targets, '-') }}-dist-manifest.json
      PLAN: ${{ inputs.plan }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Install LLVM and Clang (Linux)
        if: runner.os == 'Linux'
        uses: KyleMayes/install-llvm-action@v1.9.0
        with:
          download-url: https://github.com/FreeMasen/llvm-builds/releases/download/v16.0.6
          force-version: true
          ubuntu-version: 20.04
          version: 16.0.6
          directory: ${{ github.workspace }}/llvm
      - name: Install LLVM and Clang (Windows)
        if: runner.os == 'Windows'
        uses: KyleMayes/install-llvm-action@v1.9.0
        with:
          download-url: https://github.com/FreeMasen/llvm-builds/releases/download/v16.0.6
          force-version: true
          directory: C:\LLVM
          version: 16.0.6
      - name: Install LLVM and Clang (MacOS)
        if: runner.os == 'Macos' && matrix.targets[0] != 'aarch64-apple-darwin'
        uses: KyleMayes/install-llvm-action@v1.9.0
        with:
          download-url: https://github.com/FreeMasen/llvm-builds/releases/download/v16.0.6
          force-version: true
          version: 16.0.6
          directory: ${{ github.workspace }}/llvm
      - name: Install LLVM and Clang (MacOS-AArch64)
        if: runner.os == 'Macos' && matrix.targets[0] == 'aarch64-apple-darwin'
        uses: FreeMasen/install-llvm-action@c9be196bafb9b4f4a7486019d3e525be0b4dc110
        with:
          download-url: https://github.com/FreeMasen/llvm-builds/releases/download/v16.0.6
          force-version: true
          version: 16.0.6
          arch: aarch64
          directory: ${{ github.workspace }}/llvm
      - name: update llvm-sys env var (MacOS)
        if: runner.os == 'Macos'
        run: echo "LLVM_SYS_160_PREFIX=$($GITHUB_WORKSPACE/llvm/bin/llvm-config --prefix)" >> "$GITHUB_ENV"
      - name: update llvm-sys env var (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install build-essential
          echo "LLVM_SYS_160_PREFIX=$($GITHUB_WORKSPACE/llvm/bin/llvm-config --prefix)" >> "$GITHUB_ENV"
      - name: update llvm-sys env var (Windows)
        if: runner.os == 'Windows'
        run:  |
          $var = C:\LLVM\bin\llvm-config --prefix
          echo "LLVM_SYS_160_PREFIX=$var" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        shell: pwsh
      - uses: swatinem/rust-cache@v2
      - name: Install cargo-dist
        run: ${{ matrix.install_dist }}
        # Get the dist-manifest
      - name: Fetch local artifacts
        uses: actions/download-artifact@v3
        with:
          name: artifacts
          path: target/distrib/
      - name: Install dependencies
        run: |
          ${{ matrix.packages_install }}
      - name: Build artifacts
        run: |
          # Actually do builds and make zips and whatnot
          cargo dist build --print=linkage --output-format=json ${{ matrix.dist_args }} > dist-manifest.json
          echo "cargo dist ran successfully"
      - id: cargo-dist
        name: Post-build
        # We force bash here just because github makes it really hard to get values up
        # to "real" actions without writing to env-vars, and writing to env-vars has
        # inconsistent syntax between shell and powershell.
        shell: bash
        run: |
          # Parse out what we just built and upload it to scratch storage
          jq --raw-output ".artifacts[]?.path" dist-manifest.json
          echo "paths<<EOF" >> "$GITHUB_OUTPUT"
          jq --raw-output ".artifacts[]?.path | select( . != null )" dist-manifest.json >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          cp dist-manifest.json "$BUILD_MANIFEST_NAME"
      - name: "Upload artifacts"
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: |
            ${{ steps.cargo-dist.outputs.paths }}
            ${{ env.BUILD_MANIFEST_NAME }}
