name: Build Runtime
permissions:
  contents: write
on:
  release:
    types: 
      - published

  workflow_dispatch:
env:
  CARGO_TERM_COLOR: always

jobs:

  build-runtime:
    strategy:
      matrix:
        os:
          - ubuntu-20.04
          - ubuntu-22.04
          - windows-2019
          - windows-2022
          - macos-11
          - macos-12
    runs-on: ${{ os.matrix }}
    env:
      TARGET_DIR: ${{ github.workspace }}/luminary_runtime-${{ matrix.os }}-${{github.ref_name}}
      COMP_SUFFIX: ${{ startsWith(matrix.os, 'windows') && '7z' || 'tar.gz' }}
    steps:
    - uses: actions/checkout@v4
    - name: build runtime libs
      id: build-runtime
      run: >-
        cargo clean &&Source
        cargo build --release -p luminary-runtime --features runtime --lib
    - name: find files Windows
      if: runner.os == 'Windows'
      shell: bash
      run: >-
        mkdir $TARGET_DIR
        && cp ./target/release/libluminary_runtime.lib $TARGET_DIR
        && cp ./target/release/libluminary_runtime.dll $TARGET_DIR
        7z a -mx9 "$TARGET_DIR.$COMP_SUFFIX" $TARGET_DIR
    - name: find files Macos
      if: runner.os == 'Macos'
      shell: bash
      run: >-
        mkdir -p $TARGET_DIR
        && cp ./target/release/libluminary_runtime.lib $TARGET_DIR
        && cp ./target/release/libluminary_runtime.dylib $TARGET_DIR
        && tar -czf $TARGET_DIR.$COMP_SUFFIX $TARGET_DIR
    - name: find files Linux
      if: runner.os == 'Linux'
      shell: bash
      run: >-
        mkdir -p $TARGET_DIR
        && cp ./target/release/libluminary_runtime.a $TARGET_DIR
        && cp ./target/release/libluminary_runtime.so .$TARGET_DIR
        && tar -czf $TARGET_DIR.$COMP_SUFFIX $TARGET_DIR
    - name: "Upload dist-manifest.json"
      uses: actions/upload-artifact@v3
      with:
        name: artifacts
        path: ${{ env.TARGET_DIR }}.${{ env.COMP_SUFFIX }}
  # update-release:
  #   needs:
  #     - build-runtime
  #   runs-on: "ubuntu-20.04"
  #   env:
  #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #   steps:
  #     - uses: actions/checkout@v4
      # - name: "Download Github Artifacts"
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: staticlib
      #     path: artifacts
      # - name: Create Github Release
      #   uses: ncipollo/release-action@v1
      #   with:
      #     allowUpdates: true
      #     tag: ${{ needs.plan.outputs.tag }}
      #     artifacts: "artifacts/*"
