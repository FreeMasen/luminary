name: Build Runtime

on:
  push:
    branches: [ "main" ]
    tags:
      - '**[0-9]+.[0-9]+.[0-9]+*'
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
env:
  CARGO_TERM_COLOR: always

jobs:
  build-ubuntu-static:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: build runtime staticlib
      id: build-runtime-static
      run: >-
        cargo clean &&
        cargo rustc --release -p luminary-runtime
        --features runtime --crate-type staticlib --lib
    - name: "Upload artifacts"
      uses: actions/upload-artifact@v3
      with:
        name: staticlib
        path: ./target/release/libluminary_runtime.a
  build-ubuntu-dyn:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: build runtime cdylib
      id: build-runtime-dyn
      run: >-
        cargo clean &&
        cargo rustc --release -p luminary-runtime
        --features runtime --crate-type cdylib --lib
    - name: "Upload artifacts"
      uses: actions/upload-artifact@v3
      with:
        name: cdylib
        path: ./target/release/libluminary_runtime.so
  announce:
    needs:
      - build-ubuntu-static
      - build-ubuntu-dyn
    # use "always() && ..." to allow us to wait for all publish jobs while
    # still allowing individual publish jobs to skip themselves (for prereleases).
    # "host" however must run to completion, no skipping allowed!
    if: ${{ always() && needs.host.result == 'success' }}
    runs-on: "ubuntu-20.04"
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: "Download Github Artifacts"
        uses: actions/download-artifact@v3
        with:
          name: staticlib
          path: artifacts
      - name: Cleanup
        run: |
          # Remove the granular manifests
          rm -f artifacts/*-dist-manifest.json
      - name: Create Github Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.plan.outputs.tag }}
          name: ${{ fromJson(needs.host.outputs.val).announcement_title }}
          body: ${{ fromJson(needs.host.outputs.val).announcement_github_body }}
          prerelease: ${{ fromJson(needs.host.outputs.val).announcement_is_prerelease }}
          artifacts: "artifacts/*"
